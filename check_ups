#!/usr/bin/env python

"""
Check various aspects of an SNMP UPS.

Michael Fincham <michael.fincham@catalyst.net.nz>.

This file is licensed under the GNU General Public License version 3.
"""

import argparse
import sys
import ConfigParser

import snimpy.manager

SNMP_HOST = '127.0.0.1'
SNMP_VERSION = 1
SNMP_COMMUNITY = 'read'

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

CONFIG_FILE = "/etc/ups-monitoring.conf"

class UpsChecker(object):

    def __init__(self, config_file):
        """
        Ensure the configuration file can be loaded and the UPS reached via SNMP
        """

        try:
            snimpy.manager.load("UPS-MIB")
        except:
            raise RuntimeError('Could not load UPS-MIB')

        try:
            self.config = ConfigParser.ConfigParser({'host': SNMP_HOST, 'community': SNMP_COMMUNITY, 'version': SNMP_VERSION})
            self.config.read(config_file)
        except:
            raise RuntimeError('Could not load configuration file %s' % config_file)

        try:
            self.ups = snimpy.manager.Manager(self.config.get('ups','host'), version=int(self.config.get('ups','version')), community=self.config.get('ups','community'))
            self.ups_name = self.ups.upsIdentName
        except:
            raise RuntimeError('Could not connect to UPS at %s' % self.config.get('ups','host'))

    def check_alarms(self):
        """
        Check that the number of alarms reported by the UPS is 0
        """

        alarms = self.ups.upsAlarmsPresent
        if alarms > 0:
            return (NAGIOS_CRITICAL, '%i alarms present' % alarms)
        else:
            return (NAGIOS_OK, 'no alarm')

    def check_temperature(self):
        """
        Check that the battery temperature reported is within thresholds
        """

        temperature = self.ups.upsBatteryTemperature

        if temperature > float(self.config.get('temperature_thresholds', 'critical_high')):
            return (NAGIOS_CRITICAL, 'temperature of %i degrees exceeds critical threshold of %s' % (temperature, self.config.get('temperature_thresholds', 'critical_high')))
        elif temperature >= float(self.config.get('temperature_thresholds', 'warning_high')):
            return (NAGIOS_WARNING, 'temperature of %i degrees exceeds warning threshold of %s' % (temperature, self.config.get('temperature_thresholds', 'warning_high')))
        elif temperature < float(self.config.get('temperature_thresholds', 'critical_low')):
            return (NAGIOS_CRITICAL, 'temperature of %i degrees is below critical threshold of %s' % (temperature, self.config.get('temperature_thresholds', 'critical_low')))
        elif temperature <= float(self.config.get('temperature_thresholds', 'warning_low')):
            return (NAGIOS_WARNING, 'temperature of %i degrees is below warning threshold of %s' % (temperature, self.config.get('temperature_thresholds', 'warning_low')))
        else:
            return (NAGIOS_OK, '%i degrees' % temperature)

    def _get_lines_for_direction(self, direction):
        """
        Sets a dict named after the direction containing data like:

        {<Integer: 1>: {'current': 6.2, 'frequency': 49.9, 'voltage': 230}, <Integer: 2>: {'current': 7.3, 'voltage': 230}, <Integer: 3>: {'current': 6.5, 'voltage': 229}}

        Representing the reported values from the UPS for each line in that directions.
        """

        if direction not in ('Output', 'Input'):
            raise NotImplementedError('Invalid direction specified')

        attributes = ('Current', 'Voltage', 'Frequency')
        lines = {}
        total_number_of_lines = 0

        for attribute in attributes:
            data = getattr(self.ups, 'ups%s%s' % (direction, attribute))

            if not hasattr(data, 'iteritems'): # some attributes do not return a dict
                                               # as they are the same for all lines
                single_item = data
                data = {}
                for l in range(1, total_number_of_lines -1): # so fake the structure for later use
                    data[l] = single_item
            elif len(data.keys()) > total_number_of_lines: # if it is a dict store the length for later use
                total_number_of_lines = len(data.keys())

            for line, value in data.iteritems():
                if attribute == "Frequency": # frequency is given multiplied by 10
                    value = (value+0.0) / 10

                if attribute == "Current": # as is current
                    value = (value+0.0) / 10

                if line in lines:
                    lines[line][attribute.lower()] = value
                else:
                    lines[line] = {attribute.lower(): value}

        setattr(self, "%s_lines" % direction.lower(), lines)

    def _check_line_attributes(self, direction):
        """
        Verify that the attributes for a given set of lines are within configured thresholds
        """

        if direction not in ('Output', 'Input'):
            raise NotImplementedError('Invalid direction specified')

        results = {'warning': {}, 'critical': {}}
        sections = ('voltage', 'current', 'frequency')

        for section in sections:
            for line, attributes in getattr(self, "%s_lines" % direction.lower()).iteritems():
                    if section in attributes:
                        for severity in ('warning', 'critical'):
                            try:
                                low_threshold = float(self.config.get('%s_thresholds' % section, '%s_%s_low' % (direction, severity)))
                            except:
                                raise RuntimeError('Could not find configuration for %s in section [%s]' % ('%s_%s_low' % (direction.lower(), severity), '%s_thresholds' % section))

                            try:
                                high_threshold = float(self.config.get('%s_thresholds' % section, '%s_%s_high' % (direction, severity)))
                            except:
                                raise RuntimeError('Could not find configuration for %s in section [%s]' % ('%s_%s_high' % (direction.lower(), severity), '%s_thresholds' % section))


                            if attributes[section] < low_threshold:
                                results[severity][line] = "line %s %s of %s is below minimum of %s" % (line, section, repr(attributes[section]), repr(low_threshold))
                            elif attributes[section] > high_threshold:
                                results[severity][line] = "line %s %s of %s exceeds maximum of %s" % (line, section, repr(attributes[section]), repr(high_threshold))

        # issues with a line that are "critical" outweight those which are merely "warning"
        results['warning'] = {line: result for line, result in results['warning'].iteritems() if line not in results['critical']}

        result_strings = []
        return_code = NAGIOS_OK

        if results['warning']:
            return_code = NAGIOS_WARNING
            result_strings.append("warning: %s" % ", ".join(results['warning'].values()))

        if results['critical']:
            return_code = NAGIOS_CRITICAL
            result_strings.append("critical: %s" % ", ".join(results['critical'].values()))

        if not result_strings:
            result_strings = ('%i lines OK' % len(getattr(self, "%s_lines" % direction.lower())), )

        return (return_code, ", ".join(result_strings))

    def check_input_lines(self):
        self._get_lines_for_direction('Input')
        return self._check_line_attributes('Input')

    def check_output_lines(self):
        self._get_lines_for_direction('Output')
        return self._check_line_attributes('Output')

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('check', choices=('alarms', 'temperature', 'input', 'output'), help='which check to run')
    parser.add_argument('--configuration-file', metavar="FILE", type=str, default=CONFIG_FILE, help='path to configuration file, defaults to %s' % CONFIG_FILE)
    args = parser.parse_args()

    try:
        checker = UpsChecker(args.configuration_file)

        if args.check == 'alarms':
            return_code, description = checker.check_alarms()
        elif args.check == 'input':
            return_code, description = checker.check_input_lines()
        elif args.check == 'output':
            return_code, description = checker.check_output_lines()
        elif args.check == 'temperature':
            return_code, description = checker.check_temperature()
        else:
            raise NotImplementedError("no check matching '%s'" % args.check) # this will only happen if not all possible choices in argparse are not implemented
    except Exception as e:
        return_code = NAGIOS_UNKNOWN
        description = "error: unable to run (%s)" % repr(e)

    sys.stdout.write("%s\n" % description)
    sys.exit(return_code)
